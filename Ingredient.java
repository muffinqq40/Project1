/*
 * An ingredient has a name, an amount and a unit. It knows how to initialize
 * itself and it knows (in a rough way) how to size itself. It would be nice
 * in the future to have an image and to have it know things like 4qt=1gal.
 */
package drs;

import java.util.Objects;
import java.util.Scanner;

/**
 *
 * @author Dave
 */
public class Ingredient {
    
    private String name;
    private double amount;  // have to allow for fractions
    private String unit;     // someday, will be Unit object
    
    // construct an ingredient object from raw data
    
    public Ingredient(String aName, double anAmount, String aUnit) {
        name = aName;
        amount = anAmount;
        unit = aUnit;
    }
    
    // construct an ingredient from a scanner - first line is the name,
    // second line is :Ingredient-amount: <number> and the third line is
    // :Ingredient-unit: <tsp, tbs, oz, lb. cup, etc.>
    

    public Ingredient(Scanner sc) {
        name = sc.nextLine().trim();
        sc.next();  // skip over the :Ingredient-amount:
        amount = sc.nextDouble();
        sc.next();  // skip over the :ingredient-unit:
        unit = sc.next();
        sc.nextLine();  // be a good citizen and eat the newline
    }
    
    /**
     * Returns a copy of the ingredient scaled by the specified amount.
     * 
     * @param scale multiplicative scale (e.g., 2 times, 1/2 times.)
     * @return a new Ingrient. The original recipe stays the same
     */
    public Ingredient scale(double scale) {
        return new Ingredient(name,scale*amount,unit);
    }
    
    public String toString() {
        return "Ingredient named " + name + " " + amount + " " + unit;
    }

    public String getName() {
        return name;
    }

    public double getAmount() {
        return amount;
    }

    public String getUnit() {
        return unit;
    }

    /// generated by netbeans
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 53 * hash + Objects.hashCode(this.name);
        hash = 53 * hash + (int) (Double.doubleToLongBits(this.amount) ^ (Double.doubleToLongBits(this.amount) >>> 32));
        hash = 53 * hash + Objects.hashCode(this.unit);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Ingredient other = (Ingredient) obj;
        if (!Objects.equals(this.name, other.name)) {
            return false;
        }
        if (Double.doubleToLongBits(this.amount) != Double.doubleToLongBits(other.amount)) {
            return false;
        }
        if (!Objects.equals(this.unit, other.unit)) {
            return false;
        }
        return true;
    }
    
    
}
